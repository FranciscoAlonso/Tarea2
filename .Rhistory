head(training)
mod2 <- train(diagnosis ~.,method="rf",
data=training,
trControl = trainControl(method="cv"),number=3)
mod1 <- mod2
mod1 <- train(diagnosis ~.,method="gbm",data=training)
mod3 <- train(diagnosis ~.,method="lda",data=training)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing); pred3 <- predict(mod3,testing)
predDF <- data.frame(pred1,pred2, pred3,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod1 <- train(CompressiveStrength ~., model = "lasso", data = training)
plot.enet(mod1)
install.packages("elasticnet")
library(elasticnet)
plot.enet(mod1)
?plot.enet
plot.enet(mod1, xvar = "penalty")
plot.enet(x = mod1, xvar = "penalty")
plot.enet(mod1$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod1$finalModel, xvar="penalty", use.color=TRUE)
mod1
mod1$finalModel
names(training)
plot.enet(mod1$finalModel, xvar=c("penalty"), use.color=TRUE)
plot(mod1$finalModel, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = TRUE)
plot.enet(mod1$finalModel, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = TRUE)
plot.enet(mod1$finalModel, xvar=c("penalty"), use.color=TRUE)
mod1
mod1$modelInfo
mod1$results
mod1$coefnames
names(training)
plot.enet(mod1$finalModel, xvar=c("penalty"), use.color=TRUE)
set.seed(233)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
getwd()
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages("forecast")
?bats
library(forecast)
?bats
bats(tstrain)
?forecast.bats()
fit <- bats(tstrain)
forecast.bats(fit, h = lengh(testing), level=95)
forecast.bats(fit, h = lenght(testing), level=95)
forecast.bats(fit, h = length(testing[1]), level=95)
dim(testing)[1]
forecast.bats(fit, h = dim(testing)[1], level=95)
fcast <- forecast.bats(fit, h = dim(testing)[1], level=95)
accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
install.packages("e1073")
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
acc <- accuracy(prediction, testing$CompressiveStrength)
acc$RMSE
acc
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Set the seed to 62433 and predict diagnosis with all the other variables using
# a random forest ("rf"), boosted trees ("gbm") and linear discriminant analysis
# ("lda") model. Stack the predictions together using random forests ("rf").
# What is the resulting accuracy on the test set? Is it better or worse than
# each of the individual predictions?
set.seed(62433)
# create models
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
fit3 <- train(diagnosis ~ ., data = training, method = "lda")
# predict test
predict1 <- predict(fit1, newdata = testing)
predict2 <- predict(fit2, newdata = testing)
predict3 <- predict(fit3, newdata = testing)
# combine predictions
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = testing$diagnosis) # training$diagnosis?
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
# confusion matrixes
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
source('C:/Users/Franciscocho/Desktop/DATA_SCIENCE/playground/q1.R')
myPlot(1)
source('C:/Users/Franciscocho/Desktop/DATA_SCIENCE/playground/q1.R')
myPlot(1)
install.packages("pdflatex")
source('~/MineriaTarea2/Tarea2/tarea2.R')
setwd('~/MineriaTarea2/Tarea2')
install.packages("apriori")
install.packages("arules")
install.packages("arulesViz")
bank <- read.csv("bank-marketing.csv")
head(bank)
bank <- read.csv("bank-marketing.csv", sep = ";")
head(bank)
View(head(bank))
summary(bank)
summary(bank)
library(arules)
library(arulesViz)
model1 <- apriori(bank)
age <- discretize(bank$age, method = "interval")
head(age)
View(head(age))
age <- discretize(bank$age, method = "cluster")
View(head(age))
head(age)
age <- discretize(bank$age, method = "cluster", categories = 5)
head(age)
age <- discretize(bank$age, method = "cluster", categories = 10)
head(age)
levels(age)
length(bank$age)
length(age)
bankDiscrete <- bank
bankDiscrete$age <- discretize(bank$age, method = "cluster", categories = 10)
summary(bankDiscrete)
source('~/MineriaTarea2/Tarea2/tarea2.R')
duration <- discretize(bank$duration, method = "cluster", categories = 5)
head(duration)
duration <- discretize(bank$duration, method = "cluster", categories = 10)
levels(duration)
bankDiscrete$duration <- discretize(bank$duration, method = "cluster", categories = 10)
campaign <- discretize(bank$campaign, method = "cluster", categories = 10)
levels(campaign)
bankDiscrete$campaign <- discretize(bank$campaign, method = "cluster", categories = 10)
bankDiscrete$pdays <- discretize(bank$pdays, method = "cluster", categories = 10)
levels(pdays)
levels(bankDiscrete$pdays)
bankDiscrete$previous <- discretize(bank$previous, method = "cluster", categories = 10)
bankDiscrete$previous <- discretize(bank$previous, method = "cluster", categories = 15)
bankDiscrete$previous <- discretize(bank$previous, method = "cluster", categories = 20)
bankDiscrete$previous <- discretize(bank$previous, method = "cluster", categories = 200)
bankDiscrete$previous <- discretize(bank$previous, method = "cluster", categories = 5)
levels(bankDiscrete$previous)
bankDiscrete$emp.var.rate <- discretize(bank$emp.var.rate, method = "cluster", categories = 10)
levels(bankDiscrete$emp.var.rate)
bankDiscrete$cons.price.idx <- discretize(bank$cons.price.idx, method = "cluster", categories = 10)
levels(bankDiscrete$cons.price.idx)
bankDiscrete$cons.conf.idx <- discretize(bank$cons.conf.idx, method = "cluster", categories = 10)
levels(bankDiscrete$cons.conf.idx)
bankDiscrete$euribor3m <- discretize(bank$euribor3m, method = "cluster", categories = 10)
levels(bankDiscrete$euribor3m)
bankDiscrete$nr.employed <- discretize(bank$nr.employed, method = "cluster", categories = 10)
levels(bankDiscrete$nr.employed)
model1 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.9))
summary(model1)
model1 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8))
summary(model1)
model1
View(model1)
str(model1)
head(model1)
inspect(model1)
source('~/MineriaTarea2/Tarea2/tarea2.R')
model2 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=No", "y=Yes"))
)
model2 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=no", "y=yes")))
inspect(model2)
source('~/MineriaTarea2/Tarea2/tarea2.R')
source('~/MineriaTarea2/Tarea2/tarea2.R')
model3 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=no", "y=yes"), default="lhs"))
inspect(model3)
View(bank$y)
bank$y
model3 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=no", "y=yes"), default="lhs"))
inspect(model3)
model3 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=no", "y=yes")))
inspect(model3)
model3 <- apriori(data = bankDiscrete, parameter = list(supp = 0.7, conf = 0.8), appearance = list(rhs=c("y=no", "y=yes"), default="lhs"))
inspect(model3)
inspection <- inspect(model3)
inspection
inspection <- inspect(model3)
rules.sorted <- sort(model3, by="lift")
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
inspect(rules.pruned)
source('~/MineriaTarea2/Tarea2/tarea2.R')
